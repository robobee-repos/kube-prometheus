/*
 * Mandatory:
 *
 * vars.grafana.image.name
 * vars.grafana.image.version
 * vars.grafana.revision
 *
 * Optional:
 * 
 * vars.grafana.limits.cpu
 * vars.grafana.limits.memory
 * vars.grafana.requests.cpu
 * vars.grafana.requests.memory
 * vars.grafana.affinity.key
 * vars.grafana.affinity.name
 * vars.grafana.affinity.required
 * vars.grafana.allowOnMaster
 * vars.grafana.tolerations[].key
 * vars.grafana.tolerations[].effect
 * vars.grafana.tolerations[].value
 * 
 * vars.grafana.storage.size
 * vars.grafana.storage.class
 * 
 */

import "robobeerun-templates/_affinities.stg"
import "robobeerun-templates/_resources.stg"
import "robobeerun-templates/_tolerations.stg"

/*
 *
 */
grafana-deployment-yaml(parent, vars) ::= <<

<if(vars.grafana.storage)>
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana
  namespace: monitoring
<if(vars.grafana.storage.class)>
  annotations:
    volume.beta.kubernetes.io/storage-class: <vars.grafana.storage.class>
<endif>
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: <vars.grafana.storage.size>
<endif>

---

apiVersion: apps/v1beta2
kind: Deployment
metadata:
  labels:
    app: grafana
  name: grafana
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - image: <vars.grafana.image.name>:<vars.grafana.image.version>
        name: grafana
        ports:
        - containerPort: 3000
          name: http
        readinessProbe:
          httpGet:
            path: /api/health
            port: http
        <resourcesGroup(parent, vars, vars.grafana)>
        volumeMounts:
        - mountPath: /etc/grafana/grafana.ini
          name: grafana-config
          subPath: grafana.ini
          readOnly: false
        - mountPath: /var/lib/grafana
          name: grafana-storage
          readOnly: false
        - mountPath: /etc/grafana/provisioning/datasources
          name: grafana-datasources
          readOnly: false
        - mountPath: /etc/grafana/provisioning/dashboards
          name: grafana-dashboards
          readOnly: false
        - mountPath: /grafana-dashboard-definitions/0/k8s-cluster-rsrc-use
          name: grafana-dashboard-k8s-cluster-rsrc-use
          readOnly: false
        - mountPath: /grafana-dashboard-definitions/0/k8s-node-rsrc-use
          name: grafana-dashboard-k8s-node-rsrc-use
          readOnly: false
        - mountPath: /grafana-dashboard-definitions/0/k8s-resources-cluster
          name: grafana-dashboard-k8s-resources-cluster
          readOnly: false
        - mountPath: /grafana-dashboard-definitions/0/k8s-resources-namespace
          name: grafana-dashboard-k8s-resources-namespace
          readOnly: false
        - mountPath: /grafana-dashboard-definitions/0/k8s-resources-pod
          name: grafana-dashboard-k8s-resources-pod
          readOnly: false
        - mountPath: /grafana-dashboard-definitions/0/nodes
          name: grafana-dashboard-nodes
          readOnly: false
        - mountPath: /grafana-dashboard-definitions/0/persistentvolumesusage
          name: grafana-dashboard-persistentvolumesusage
          readOnly: false
        - mountPath: /grafana-dashboard-definitions/0/pods
          name: grafana-dashboard-pods
          readOnly: false
        - mountPath: /grafana-dashboard-definitions/0/statefulset
          name: grafana-dashboard-statefulset
          readOnly: false
      nodeSelector:
        beta.kubernetes.io/os: linux
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
      serviceAccountName: grafana
      volumes:
      - name: grafana-storage
<if(vars.grafana.storage)>
        persistentVolumeClaim:
          claimName: grafana
<else>
        emptyDir: {}
<endif>
      - name: grafana-datasources
        secret:
          secretName: grafana-datasources
      - configMap:
          name: grafana-<vars.grafana.revision>
        name: grafana-config
      - configMap:
          name: grafana-dashboards
        name: grafana-dashboards
      - configMap:
          name: grafana-dashboard-k8s-cluster-rsrc-use
        name: grafana-dashboard-k8s-cluster-rsrc-use
      - configMap:
          name: grafana-dashboard-k8s-node-rsrc-use
        name: grafana-dashboard-k8s-node-rsrc-use
      - configMap:
          name: grafana-dashboard-k8s-resources-cluster
        name: grafana-dashboard-k8s-resources-cluster
      - configMap:
          name: grafana-dashboard-k8s-resources-namespace
        name: grafana-dashboard-k8s-resources-namespace
      - configMap:
          name: grafana-dashboard-k8s-resources-pod
        name: grafana-dashboard-k8s-resources-pod
      - configMap:
          name: grafana-dashboard-nodes
        name: grafana-dashboard-nodes
      - configMap:
          name: grafana-dashboard-persistentvolumesusage
        name: grafana-dashboard-persistentvolumesusage
      - configMap:
          name: grafana-dashboard-pods
        name: grafana-dashboard-pods
      - configMap:
          name: grafana-dashboard-statefulset
        name: grafana-dashboard-statefulset
      <tolerationMasterGroup(parent, vars, vars.grafana.allowOnMaster)>
      <tolerationsGroup(parent, vars, vars.grafana.tolerations, vars.grafana.allowOnMaster)>
      <affinitiesGroup(parent, vars, vars.grafana.affinity)>

>>
